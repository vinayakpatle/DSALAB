public class OptimalBST {
    public static double optimalBST(int[] keys, double[] success_probs, double[] fail_probs, int n) {
        double[][] dp = new double[n][n];
        double[][] cost = new double[n][n];
        
        for (int i = 0; i < n; i++) {
            dp[i][i] = success_probs[i] + fail_probs[i];
        }
        
        for (int i = 0; i < n; i++) {
            cost[i][i] = success_probs[i] + fail_probs[i];
            for (int j = i + 1; j < n; j++) {
                cost[i][j] = cost[i][j - 1] + success_probs[j] + fail_probs[j];
            }
        }
        
        for (int length = 2; length <= n; length++) {
            for (int i = 0; i <= n - length; i++) {
                int j = i + length - 1;
                dp[i][j] = Double.MAX_VALUE;
                
                for (int r = i; r <= j; r++) {
                    double left_cost = (r > i) ? dp[i][r - 1] : 0;
                    double right_cost = (r < j) ? dp[r + 1][j] : 0;
                    double total_cost = left_cost + right_cost + cost[i][j];
                    dp[i][j] = Math.min(dp[i][j], total_cost);
                }
            }
        }
        
        return dp[0][n - 1];
    }
    
    public static void main(String[] args) {
        int[] keys = {5, 15, 25, 35};
        double[] success_probs = {0.2, 0.15, 0.1, 0.05};
        double[] fail_probs = {0.3, 0.1, 0.05, 0.15, 0.25};
        
        int n = keys.length;
        double result = optimalBST(keys, success_probs, fail_probs, n);
        
        System.out.println("The minimum expected cost of the optimal BST is: " + result);
    }
}
